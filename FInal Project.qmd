---
title: "Final Document"
format: html
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}

library(tidyverse)
library(tidymodels)
library(patchwork)
library(kableExtra)
library(ggridges)
library(marginaleffects)
library(reshape2)
library(knitr)
library(ggplot2)
library(kknn)

data <- read.csv("https://huggingface.co/datasets/kheejay88/water_potability/raw/main/water_potability.csv")




```

#Exploratory Data Analysis

```{r}

## Splitting the data into training and testing data then creating cross validation folds 

data$Potability <- as.factor(data$Potability)

set.seed(678)
data_splits <- initial_split(data, strata = Potability)
  
train <- training(data_splits)

test <- testing(data_splits)

set.seed (254)
train_folds <- vfold_cv(train, v = 10, strata = Potability)



```



```{r}


train %>% 
ggplot() +
  geom_histogram(aes(x = Conductivity))


conductivity_cut <- train %>% 
  mutate(bins = cut(x = Conductivity, breaks = 5))

conductivity_cut %>% 
  ggplot() +
  geom_boxplot(aes(x = bins, y = Organic_carbon, fill = Potability)) 
```



```{r}

knn_spec <- nearest_neighbor() %>% 
  set_engine("kknn") %>% 
  set_mode("classification")

knn_rec <- recipe(Potability ~ ., data = train) %>% 
  step_normalize(all_numeric_predictors()) %>%
  step_impute_median(all_numeric_predictors()) %>% 
step_dummy(all_nominal_predictors())

knn_wf <- workflow() %>% 
  add_model(knn_spec) %>% 
  add_recipe(knn_rec)


knn_fit <- knn_wf %>%
  fit(train)


knn_fit %>%
  augment(train) %>%
  accuracy(Potability, .pred_class)

```
```{r}
#train2 <- train %>% 
#  mutate(Potability = as.integer(Potability))

#train_folds2 <- train2 %>% 
 # vfold_cv(train2, v = 10)

knn_tune_spec <- nearest_neighbor(neighbors = tune()) %>% 
  set_engine("kknn") %>% 
  set_mode("classification")

knn_tune_rec <- recipe(Potability ~., data = train) %>% 
  step_normalize(all_numeric_predictors()) %>% 
  step_impute_median(all_numeric_predictors()) %>% 
  step_dummy(all_nominal_predictors())

knn_tune_wf <- workflow() %>% 
  add_model(knn_tune_spec) %>% 
  add_recipe(knn_tune_rec)


knn_cv_tune_results <- knn_tune_wf %>% 
  tune_grid(
    grid = 10,
    resamples = (train_folds),
    metrics = metric_set(accuracy)
  )
knn_cv_tune_results %>% 
  collect_metrics()

knn_tune_best <- knn_cv_tune_results %>% 
  select_best(metric = "accuracy")

knn_final_tune_wf <- knn_tune_wf %>% 
  finalize_workflow(knn_tune_best)

knn_tune_fit <- knn_final_tune_wf %>% 
  fit(train)

knn_tune_fit %>% 
  augment(train) %>% 
  accuracy(Potability, .pred_class)

```





```{r}

dt_spec <- decision_tree() %>% 
  set_engine("rpart") %>% 
  set_mode("classification")

dt_rec <- recipe(Potability ~ ., data = train) %>% 
  step_normalize(all_numeric_predictors()) %>% 
  step_impute_mean(all_numeric_predictors()) %>% 
  step_dummy(all_nominal_predictors())

dt_wf <- workflow() %>% 
  add_model(dt_spec) %>% 
  add_recipe(dt_rec)


dt_fit <- dt_wf %>% 
  fit(train)

dt_fit %>% 
  augment(train) %>% 
  accuracy(Potability, .pred_class)


```


```{r}
dt_tune_spec <- decision_tree(min_n = tune(), tree_depth = tune()) %>% 
  set_engine("rpart") %>% 
  set_mode("classification")

dt_tune_rec <- recipe(Potability ~., data = train) %>% 
step_normalize(all_numeric_predictors()) %>% 
  step_impute_median(all_numeric_predictors()) %>% 
  step_dummy(all_nominal_predictors())


dt_tune_wf <- workflow() %>% 
  add_model(dt_tune_spec) %>% 
  add_recipe(dt_tune_rec)


dt_cv_tune_fit <- dt_tune_wf %>% 
  tune_grid(
    grid = 30,
    resamples = (train_folds),
    metrics = metric_set(accuracy)
  )
dt_cv_tune_fit %>% 
  collect_metrics()

dt_tune_best <- dt_cv_tune_fit %>% 
  select_best(metric = "accuracy")

dt_final_tune_wf <- dt_tune_wf %>% 
  finalize_workflow(dt_tune_best)

dt_cv_tune_fit <- dt_final_tune_wf %>% 
  fit(train)


dt_cv_tune_fit %>% 
  augment(train) %>% 
  accuracy(Potability, .pred_class)
```






The `echo: false` option disables the printing of code (only output is displayed).
