---
title: "Final Document"
format: html
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Setting up the Data

```{r}

library(tidyverse)
library(tidymodels)
library(patchwork)
library(kableExtra)
library(ggridges)
library(marginaleffects)
library(reshape2)
library(knitr)
library(ggplot2)
library(kknn)
library(ggforce)



data1 <- read.csv("https://storage.googleapis.com/kagglesdsdata/datasets/4933767/8305330/Crop_Recommendation.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20250414%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20250414T145419Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=55857991c5dbc4c3057bd117c036e2ac39c17c3d85479480a42ac320e310c91a58566e9466d98d9b0966699744f08e3dcd62880c77adcbe34ddc9a6e2d89ff05eb7d489d625fdce36ad9213a726f2b0d9a45edcd14deb5f7e5b0f418c844cc014493ba69a994f4e3076329c1c03ae59c3e564e31ac3d614920a4ed28412f5a9640ee14837a086edbad82deed368bed2110a2cfc5adb72fe51838150477f6075f9987b29bb6b993891fe8ea7565e665966a0bee2ab0dcb48c326eae2b69757457b6d412b136d33343d505c2af989014ec00e36c838d076b7399aa2c0e71d665a3f80b46a4e5c5fa37c33a39460243ff1fff0825e3bf1bcf6882471ab63bc57fc6")

```


```{r}


```

```{r}

data1$Crop <- as.factor(data1$Crop)

set.seed(298)
data_splits1 <- initial_split(data1)
  
train1 <- training(data_splits1)

test1 <- testing(data_splits1)

set.seed (247)
train_folds1 <- vfold_cv(train1, v = 10)


```
#Exploratory Data Analysis

##Statement of Purpose

These plots show the differences of the soil and climate parameters measured for each crop. Some of the parameters are very descriptive for specific crops while others are not so clear. By making a model and describing the meaning behind how crops can be classified, we will be able to make decisions on what cover crop to use on land that will not further degrade the soil for the main crop to thrive when in season. There are a lot of factors that play a part in the crop yield but these are some of the most important and easily measured parameters.

```{r}

NitrogenPlot <- train1 %>% 
  ggplot() +
  geom_boxplot(aes(x = Nitrogen, y = Crop, fill = Crop)) +
  geom_boxplot(aes(x = Nitrogen)) +
  labs(title = "Soil Nitrogen in each Crop") +
  theme(legend.position = "none")

NitrogenPlot

AvgNit <- train1 %>% 
  summarise(
  mean(Nitrogen)
)
AvgNit
```
This plot shows that there are some crops that are very similar in having a low nitrogen ratio need (Pomegranates, Pigeon Peas, Oranges, Mung Beans, Moth Beans, Mangos, Lentils, Kidney Beans, Grapes, Coconuts, and Apples) while the others (Watermelon, Rice, Papaya, Muskmelon, Maize, Jute, Cotton, Coffee, Chick Pea, Blackgram, and Banana) require a higher nitrogen ratio.

```{r}
PhosphorusPlot <- train1 %>% 
  ggplot() +
  geom_boxplot(aes(x = Phosphorus, y = Crop, fill = Crop)) +
  geom_boxplot(aes(x = Phosphorus)) +
  labs(title = "Soil Phosphorus in each Crop") +
  theme(legend.position = "none")
PhosphorusPlot

AvgPho <- train1 %>% 
  summarise(
    mean(Phosphorus)
  )
AvgPho
```  
In this plot, Grapes and Apples are outliers, having Phosphorus values that are much higher than the other crops. The remaining 20 crops are still spread between 3 general clusters, close to the lower quartile, close to the mean, and close to the upper quartile.

```{r}
PotassiumPlot <- train1 %>% 
  ggplot() +
  geom_boxplot(aes(x = Potassium, y = Crop, fill = Crop)) +
  geom_boxplot(aes(x = Potassium)) +
  labs(title = "Potassium in each Crop") +
  theme(legend.position = "none")
PotassiumPlot

AvgPot <- train1 %>% 
  summarise(
    mean(Potassium)
  )
AvgPot
```
In this plot, Potassium shows to be similar to Phosphorus in the sense that grapes and apples are large outliers and there seems to be the lower, mean, and upper quartile groups. It will be interesting to compare the other crops to one another to see if the same groups form with both parameters. 

```{r}
TemperaturePlot <- train1 %>% 
  ggplot() + 
  geom_boxplot(aes(x = Temperature, y = Crop, fill = Crop)) +
  geom_boxplot(aes(x = Temperature)) +
  labs(title = "Temperature of each Crop") +
  theme(legend.position = "none")
TemperaturePlot

AvgTemp <- train1 %>% 
  summarise(
    mean(Temperature)
  )
AvgTemp
```
This plot shows the temperature distribution of the crops. Grapes, Oranges, Papaya, and Pidgeon Peas are extremely variable in their temperature range, meaning that climate may be less important than soil parameters.
```{r}
HumidityPlot <- train1 %>% 
  ggplot() +
  geom_boxplot(aes(x = Humidity, y = Crop, fill = Crop)) +
  geom_boxplot(aes(x = Humidity)) +
  labs(title = "Humidity of each Crop") +
  theme(legend.position = "none")
HumidityPlot

AvgHum <- train1 %>% 
  summarise(
    mean(Humidity)
  )
AvgHum
```
This plot shows the different humidity measurements for each of the crops. In this plot there is also two groups with outliers. Chick Peas and Kidney Beans are very low in humidity while the other crops are hovering around the mean and lower and upper quartiles.

```{r}
phPlot <- train1 %>% 
  ggplot() +
  geom_boxplot(aes(x = pH_Value, y = Crop, fill = Crop)) +
  geom_boxplot(aes(x = pH_Value)) +
  labs(title = "Soil pH of each Crop") +
  theme(legend.position = "none")
phPlot

AvgpH <- train1 %>% 
  summarise(
    mean(pH_Value)
  )
AvgpH
```
This plot shows the distribution of pH in the soil. 

```{r}
RainfallPlot <- train1 %>% 
  ggplot() +
  geom_boxplot(aes(x = Rainfall, y = Crop, fill = Crop)) +
  geom_boxplot(aes(x = Rainfall)) +
  labs(title = "Rainfall of each Crop") +
  theme(legend.position = "none")
RainfallPlot


```
This plot shows the rainfall in millimeters for each crop. Many are specific to the amount of rain they receive but some crops (Rice, Pidgeon Peas, Papaya, Kidney Beans, Coffee, and Coconut) are quite variable.

```{r}


```

#Model Construction and Testing
```{r}

dt_spec1 <- decision_tree() %>% 
  set_engine("rpart") %>% 
  set_mode("classification")

dt_rec1 <- recipe(Crop ~ ., data = train1) %>% 
  step_normalize(all_numeric_predictors()) %>% 
  step_impute_mean(all_numeric_predictors()) %>% 
  step_dummy(all_nominal_predictors())

dt_wf1 <- workflow() %>% 
  add_model(dt_spec1) %>% 
  add_recipe(dt_rec1)


dt_fit1 <- dt_wf1 %>% 
  fit(train1)

dt_fit1 %>% 
  augment(train1) %>% 
  accuracy(Crop, .pred_class)


dt_fit1 %>%
  extract_fit_engine() %>%
  rpart.plot::rpart.plot(type = 0, tweak = 2.5)  
  

#extracted_tree <- dt_fit1 %>% 
 # extract_fit_engine()

#plot(extracted_tree)
#text(extracted_tree)


```













The `echo: false` option disables the printing of code (only output is displayed).
