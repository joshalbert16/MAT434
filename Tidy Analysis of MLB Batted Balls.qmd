---
title: "Tidy Analysis of MLB Batted Balls"
author: "Joshua Albert"
format: html
---

## Loading Data

```{r}
#| message: false

#| code-fold: false

library(tidyverse)
library(tidymodels)
library(skimr)
library(kableExtra)
```

## Read in Data

```{r}
park_dimensions <- read.csv("https://raw.githubusercontent.com/agmath/agmath.github.io/refs/heads/master/data/classification/park_dimensions.csv")


batted_balls <- read.csv("https://raw.githubusercontent.com/agmath/agmath.github.io/refs/heads/master/data/classification/battedballs.csv")

```

## Joining Data

```{r}
batted_balls <- batted_balls %>%
left_join(park_dimensions, by = c("park" = "park"))


```

We joined the `batted_balls` and `parks` data together, to obtain a full data set with `r nrow(batted_balls)` rows and `r ncol(batted_balls)` columns

```{r}
batted_balls%>%
  skim()

```

## Split into training and test data

```{r}
set.seed(434)
data_splits <- initial_split(batted_balls, 0.85, strata = is_home_run)

train <- training(data_splits)
test <- testing(data_splits)


```

## Exploratory Data Analysis

How and why do home runs happen?

Filtering Rows

```{r}
train %>% 
  filter(is_home_run == 1) 
 
train %>%
  filter(launch_angle > 45)

train%>%
  filter(str_detect(NAME, "Fenway"))
```

Selecting just a few columns

```{r}
train %>%
  select(launch_speed, launch_angle, is_home_run)
```

Building new variables from old ones (*Feature Engineering*)

```{r}
train %>%
  mutate(fast_pitch = ifelse(pitch_mph > 100, "yes", "no"))

```

### Summary Statistics

Home runs...

```{r}
train %>%
  count(is_home_run)%>%
  mutate(prop = 100*n/sum(n))

```

```{r}
train %>%
  summarize(pct_hr = 100*mean(is_home_run))
```

```{r}

```

Summarizing Launch Angle

```{r}
train %>%
  filter(!is.na(launch_angle)) %>%
  summarize(
    min_angle = min(launch_angle),
    mean_angle = mean(launch_angle),
    median_angle = median(launch_angle),
    max_angle = max(launch_angle),
    sd_angle = sd(launch_angle),
    
  )
```

#### Grouped Summaries

```{r}
train %>%
  group_by(is_home_run, NAME) %>%
  filter(!is.na(launch_angle)) %>%
  summarize(
    min_angle = min(launch_angle),
    mean_angle = mean(launch_angle),
    median_angle = median(launch_angle),
    max_angle = max(launch_angle),
    sd_angle = sd(launch_angle),
  ) 

    
```

### Data Viz

```{r}

train %>%
  ggplot() + 
  geom_bar(aes(x = is_home_run)) +
  labs(
    title = "Homeruns"
  )


```

```{r}

train %>%
  ggplot() + 
  geom_histogram(aes(x = pitch_mph, y = after_stat(density))) +
geom_density(aes(x = pitch_mph))



```

```{r}
train %>%
   ggplot() +
geom_bar(aes(x = bb_type, fill = bearing)) +
  labs(
    title = "Distribution of Direction Hit and Type of Hit"

  )

```

## Model Construction, Evaluation, and Tuning

Tidy Models Framework

1.  Model "SPEC"ification
2.  "REC"ipe
3.  Package both into a workflow

Data Prep: Rules of Thumb
1. Recode logical (TRUE/FALSE) into characters (mutate w/ as.character)
2. Classification outcome needs to be a factor (mutatate w/ "as.factor" OR "factor")


```{r}
hits_for_model <- batted_balls %>%
  mutate(is_home_run = ifelse(is_home_run == 1, "Yes", "No")) %>%
  mutate(is_home_run = factor(is_home_run, levels = c("No", "Yes")))


set.seed(434)
data_splits <- initial_split(hits_for_model, 0.85, strata = is_home_run)

train <- training(data_splits)
test <- testing(data_splits)

```

Fitting a model...

```{r}
dt_spec <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")
  
dt_rec <- recipe(is_home_run ~ launch_speed + launch_angle + pitch_mph + pitch_name + Cover, data = train) %>%
  step_impute_median(all_numeric_predictors()) %>%
  step_impute_mode(all_nominal_predictors()) %>%
  step_dummy(all_nominal_predictors())

dt_wf <- workflow() %>%
  add_model(dt_spec) %>%
  add_recipe(dt_rec)

dt_fit <- dt_wf %>%
  fit(train)

```

Lets see the model


```{r}
dt_fit %>%
  extract_fit_engine() %>%
  rpart.plot::rpart.plot()
```

Assess our models performance

Training Data...

```{r}
dt_fit %>%
  augment(train) %>%
  accuracy(is_home_run, .pred_class)

```

Testing Data


```{r}
dt_fit %>%
  augment(test) %>%
  accuracy(is_home_run, .pred_class)
```
Cross Validation


```{r}
train_folds <- vfold_cv(train, v = 10, strat = is_home_run)

dt_cv_results <- dt_wf %>%
  fit_resamples(train_folds)

dt_cv_results %>%
  collect_metrics()

```

Tuning our model...

```{r}
dt_spec <- decision_tree(tree_depth = tune()) %>%
  set_engine("rpart") %>%
  set_mode("classification")

dt_wf <- workflow() %>%
  add_model(dt_spec) %>%
  add_recipe(dt_rec)

dt_tune_results <- dt_wf %>%
  tune_grid(
    resamples = train_folds,
    grid = 10
  )
dt_tune_results %>%
  show_best(n = 10, metric = "accuracy")
```


